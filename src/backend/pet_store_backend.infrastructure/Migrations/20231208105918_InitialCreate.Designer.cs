// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pet_store_backend.infrastructure.Persistence;

#nullable disable

namespace pet_store_backend.infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231208105918_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderId");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderProductId");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderProductStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts", (string)null);
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProduct.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProductCategory.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryId");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<Guid?>("CustomerRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PasswordResetToken")
                        .IsUnique()
                        .HasFilter("[PasswordResetToken] IS NOT NULL");

                    b.HasIndex("VerificationToken")
                        .IsUnique()
                        .HasFilter("[VerificationToken] IS NOT NULL");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1114c365-9190-4410-a40b-da23fece902c"),
                            CustomerRoleId = new Guid("3589728c-dd7b-4be0-84fb-ccdfd0bded91"),
                            Email = "20110629@student.hcmute.edu.vn",
                            FirstName = "Dat",
                            LastName = "Thien",
                            PasswordHash = new byte[] { 174, 85, 1, 1, 138, 112, 174, 143, 142, 199, 9, 197, 28, 99, 164, 199, 160, 236, 19, 56, 144, 199, 37, 255, 190, 237, 182, 42, 83, 72, 193, 24, 249, 14, 23, 250, 50, 87, 252, 223, 71, 85, 31, 163, 225, 236, 60, 211, 96, 196, 96, 66, 80, 168, 7, 66, 88, 123, 102, 34, 160, 246, 205, 251 },
                            PasswordSalt = new byte[] { 204, 136, 38, 22, 19, 174, 62, 94, 204, 237, 48, 76, 19, 87, 251, 184, 124, 72, 184, 239, 86, 193, 106, 47, 3, 122, 199, 43, 49, 232, 202, 193, 231, 204, 145, 178, 26, 246, 49, 206, 242, 17, 104, 89, 41, 209, 52, 231, 223, 81, 165, 66, 140, 214, 112, 55, 73, 127, 125, 83, 26, 204, 210, 12, 7, 156, 65, 202, 191, 76, 43, 20, 67, 125, 133, 6, 193, 196, 103, 102, 236, 201, 234, 69, 13, 233, 13, 209, 39, 115, 160, 1, 19, 155, 39, 246, 114, 255, 77, 7, 211, 126, 105, 81, 73, 24, 243, 40, 226, 246, 135, 17, 226, 218, 102, 67, 29, 54, 114, 121, 127, 34, 230, 178, 45, 217, 116, 34 },
                            VerifiedAt = new DateTime(2023, 12, 8, 17, 59, 18, 556, DateTimeKind.Local).AddTicks(7620)
                        });
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PasswordResetToken")
                        .IsUnique()
                        .HasFilter("[PasswordResetToken] IS NOT NULL");

                    b.HasIndex("UserRoleId");

                    b.HasIndex("VerificationToken")
                        .IsUnique()
                        .HasFilter("[VerificationToken] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("533033ee-c0c2-4ccc-b4cb-edffa7f58493"),
                            Email = "dntdat09@gmail.com",
                            FirstName = "Dat",
                            LastName = "Thien",
                            PasswordHash = new byte[] { 27, 31, 0, 208, 55, 158, 79, 90, 187, 80, 223, 238, 147, 80, 217, 35, 155, 115, 79, 82, 107, 195, 172, 137, 255, 142, 193, 174, 141, 234, 66, 193, 192, 69, 181, 63, 63, 110, 107, 107, 227, 154, 115, 45, 170, 81, 175, 158, 30, 187, 141, 133, 189, 48, 154, 39, 43, 30, 93, 222, 139, 185, 199, 250 },
                            PasswordSalt = new byte[] { 84, 212, 36, 244, 252, 107, 179, 77, 25, 170, 156, 242, 190, 217, 242, 225, 120, 128, 171, 219, 39, 233, 46, 147, 157, 121, 15, 190, 50, 211, 213, 78, 68, 47, 26, 126, 185, 12, 102, 48, 200, 138, 67, 189, 200, 196, 45, 140, 165, 72, 98, 79, 196, 53, 81, 3, 36, 179, 85, 189, 45, 243, 241, 148, 112, 41, 79, 189, 206, 75, 167, 255, 153, 195, 135, 157, 148, 93, 14, 71, 18, 229, 78, 236, 37, 122, 243, 160, 111, 17, 172, 163, 175, 21, 233, 31, 25, 155, 83, 48, 115, 253, 27, 199, 179, 143, 35, 176, 73, 65, 225, 27, 103, 189, 56, 213, 55, 221, 95, 54, 217, 163, 137, 162, 236, 31, 179, 224 },
                            UserRoleId = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1"),
                            VerifiedAt = new DateTime(2023, 12, 8, 17, 59, 18, 556, DateTimeKind.Local).AddTicks(7165)
                        });
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserPermissionId");

                    b.Property<bool>("Create")
                        .HasColumnType("bit");

                    b.Property<bool>("Deactive")
                        .HasColumnType("bit");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserPermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9f7c20c8-c2d5-4e0b-a43c-d5d16aba828c"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Users",
                            Update = true,
                            UserRoleId = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1")
                        },
                        new
                        {
                            Id = new Guid("a91c5a02-bc84-4fb0-93aa-a56bb81301df"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Customers",
                            Update = true,
                            UserRoleId = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1")
                        },
                        new
                        {
                            Id = new Guid("cb7f1cbf-850d-47b8-aa5e-42e6163dd1e5"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Categories",
                            Update = true,
                            UserRoleId = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1")
                        },
                        new
                        {
                            Id = new Guid("67809df8-a274-4622-bd49-fcc32af2381b"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Products",
                            Update = true,
                            UserRoleId = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1")
                        },
                        new
                        {
                            Id = new Guid("7c1afd3f-48ff-4c81-a7c4-1b54657c28d4"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "UserRoles",
                            Update = true,
                            UserRoleId = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1")
                        },
                        new
                        {
                            Id = new Guid("25cd3384-623d-402c-8b97-c834aaa46353"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "UserPermissions",
                            Update = true,
                            UserRoleId = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1")
                        },
                        new
                        {
                            Id = new Guid("f29ec49a-b9c3-4909-976b-5d53921b4240"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Orders",
                            Update = true,
                            UserRoleId = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1")
                        },
                        new
                        {
                            Id = new Guid("461ab9c6-0d0c-4c99-bda7-e413684dc710"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "OrderProducts",
                            Update = true,
                            UserRoleId = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1")
                        });
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserRoleId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d7473b0b-9ab5-4715-864a-136a99d9cac1"),
                            Status = true,
                            UserRoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("3589728c-dd7b-4be0-84fb-ccdfd0bded91"),
                            Status = true,
                            UserRoleName = "User"
                        });
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.User", "User")
                        .WithMany("UserProducts")
                        .HasForeignKey("UserId");

                    b.OwnsOne("pet_store_backend.domain.Entities.Orders.ValueObjects.DeliveryDate", "ExpectedDelivery", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpectedDeliveryEndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpectedDeliveryStartDate");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("ExpectedDelivery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.OrderProduct", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.Customer", "Customer")
                        .WithMany("CustomerProducts")
                        .HasForeignKey("CustomerId");

                    b.HasOne("pet_store_backend.domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId");

                    b.HasOne("pet_store_backend.domain.Entities.PetProducts.PetProduct.Product", "Product")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductId");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProduct.Product", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.PetProducts.PetProductCategory.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pet_store_backend.domain.Entities.PetProducts.ValueObjects.Price", "ProductPrice", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18, 2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<decimal>("Discount")
                                .HasColumnType("decimal(18, 2)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("ProductPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.Customer", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.UserRole", "CustomerRole")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerRoleId");

                    b.Navigation("CustomerRole");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.User", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.UserPermission", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.UserRole", "UserRole")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProduct.Product", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProductCategory.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.Customer", b =>
                {
                    b.Navigation("CustomerProducts");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.User", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.UserRole", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("UserPermissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
