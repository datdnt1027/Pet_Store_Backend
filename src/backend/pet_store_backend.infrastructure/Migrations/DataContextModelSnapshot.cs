// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using pet_store_backend.infrastructure.Persistence;

#nullable disable

namespace pet_store_backend.infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderId");

                    b.Property<DateTime?>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<string>("OrderStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders", (string)null);
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.OrderProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("OrderProductId");

                    b.Property<Guid?>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("OrderProductStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts", (string)null);
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProduct.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ProductId");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ProductDetail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductQuantity")
                        .HasColumnType("integer");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products", (string)null);
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProductCategory.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CategoryId");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedDateTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UpdatedDateTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<Guid?>("CustomerRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CustomerRoleId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PasswordResetToken")
                        .IsUnique()
                        .HasFilter("[PasswordResetToken] IS NOT NULL");

                    b.HasIndex("VerificationToken")
                        .IsUnique()
                        .HasFilter("[VerificationToken] IS NOT NULL");

                    b.ToTable("Customers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc69ea5a-916c-4c5c-9b8d-041c6afe809d"),
                            CustomerRoleId = new Guid("2efbff6a-599e-4738-a619-dd2f9c9f1543"),
                            Email = "20110629@student.hcmute.edu.vn",
                            FirstName = "Dat",
                            LastName = "Thien",
                            PasswordHash = new byte[] { 234, 127, 93, 177, 150, 250, 75, 76, 164, 228, 217, 159, 75, 76, 84, 237, 37, 147, 214, 15, 222, 164, 11, 30, 251, 61, 86, 95, 72, 41, 146, 192, 222, 39, 14, 57, 189, 250, 199, 152, 75, 57, 49, 133, 169, 219, 176, 36, 19, 105, 218, 28, 103, 87, 207, 36, 220, 65, 18, 144, 97, 153, 155, 104 },
                            PasswordSalt = new byte[] { 114, 254, 85, 47, 112, 129, 67, 176, 83, 221, 77, 222, 225, 247, 76, 56, 59, 50, 139, 223, 191, 205, 42, 216, 221, 47, 110, 63, 77, 238, 157, 223, 94, 19, 168, 76, 217, 13, 104, 100, 140, 77, 198, 187, 138, 3, 107, 124, 115, 63, 73, 220, 126, 169, 28, 89, 130, 230, 14, 158, 244, 77, 212, 166, 4, 138, 110, 116, 241, 173, 52, 103, 45, 199, 112, 25, 244, 12, 8, 0, 238, 241, 8, 34, 255, 116, 67, 227, 10, 69, 188, 232, 39, 158, 131, 40, 85, 60, 56, 26, 203, 60, 150, 24, 32, 124, 72, 143, 176, 7, 133, 207, 48, 198, 34, 120, 248, 249, 10, 92, 153, 61, 15, 69, 82, 32, 226, 51 },
                            Status = true,
                            VerifiedAt = new DateTime(2023, 12, 20, 19, 38, 34, 419, DateTimeKind.Local).AddTicks(776)
                        });
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserId");

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("Avatar")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordResetToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("TokenExpires")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerificationToken")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("VerifiedAt")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("PasswordResetToken")
                        .IsUnique()
                        .HasFilter("[PasswordResetToken] IS NOT NULL");

                    b.HasIndex("UserRoleId");

                    b.HasIndex("VerificationToken")
                        .IsUnique()
                        .HasFilter("[VerificationToken] IS NOT NULL");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("74e5c1f1-a743-443a-9e3f-40b5a3a95ac9"),
                            Email = "dntdat09@gmail.com",
                            FirstName = "Dat",
                            LastName = "Thien",
                            PasswordHash = new byte[] { 108, 3, 201, 52, 104, 8, 158, 155, 200, 172, 185, 10, 3, 254, 108, 221, 187, 81, 115, 167, 135, 75, 161, 24, 122, 115, 204, 140, 12, 62, 113, 92, 133, 168, 93, 251, 213, 99, 162, 236, 113, 32, 158, 30, 240, 178, 42, 61, 40, 41, 85, 202, 181, 63, 115, 178, 159, 54, 86, 245, 16, 71, 44, 136 },
                            PasswordSalt = new byte[] { 202, 217, 169, 172, 66, 55, 85, 160, 178, 230, 6, 8, 20, 77, 82, 170, 50, 51, 146, 139, 183, 149, 213, 238, 146, 145, 203, 159, 31, 148, 41, 114, 106, 87, 31, 47, 227, 247, 42, 91, 211, 241, 42, 242, 159, 225, 41, 90, 179, 125, 216, 198, 171, 24, 234, 191, 82, 62, 235, 118, 251, 155, 230, 12, 33, 174, 5, 76, 214, 27, 192, 15, 221, 132, 114, 138, 17, 108, 235, 161, 92, 137, 212, 231, 15, 104, 92, 113, 127, 158, 21, 28, 30, 90, 218, 78, 204, 163, 115, 245, 30, 62, 138, 12, 191, 244, 65, 182, 59, 195, 66, 110, 62, 254, 84, 203, 104, 235, 62, 113, 105, 5, 54, 246, 214, 151, 130, 104 },
                            Status = true,
                            UserRoleId = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397"),
                            VerifiedAt = new DateTime(2023, 12, 20, 19, 38, 34, 419, DateTimeKind.Local).AddTicks(491)
                        });
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.UserPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserPermissionId");

                    b.Property<bool>("Create")
                        .HasColumnType("bit");

                    b.Property<bool>("Deactive")
                        .HasColumnType("bit");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.Property<Guid?>("UserRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserPermissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a837705-4133-4f01-a4fb-30e65160ecd0"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Users",
                            Update = true,
                            UserRoleId = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397")
                        },
                        new
                        {
                            Id = new Guid("11400538-f5fb-4376-859c-c402d45a5132"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Customers",
                            Update = true,
                            UserRoleId = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397")
                        },
                        new
                        {
                            Id = new Guid("7ce3f6e9-3b31-4762-a577-0df38d388b35"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Categories",
                            Update = true,
                            UserRoleId = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397")
                        },
                        new
                        {
                            Id = new Guid("e24cabee-aea1-415f-8df8-08147e5adc21"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Products",
                            Update = true,
                            UserRoleId = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397")
                        },
                        new
                        {
                            Id = new Guid("19386eaf-752d-4f21-a6e5-60e32e5d0997"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "UserRoles",
                            Update = true,
                            UserRoleId = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397")
                        },
                        new
                        {
                            Id = new Guid("d560bee4-0de0-4783-baa5-f98329071635"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "UserPermissions",
                            Update = true,
                            UserRoleId = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397")
                        },
                        new
                        {
                            Id = new Guid("1eab85c6-a7e2-4384-a352-427f615201f0"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "Orders",
                            Update = true,
                            UserRoleId = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397")
                        },
                        new
                        {
                            Id = new Guid("0f928576-21cd-442f-bec2-98746090003a"),
                            Create = true,
                            Deactive = true,
                            Read = true,
                            TableName = "OrderProducts",
                            Update = true,
                            UserRoleId = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397")
                        });
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("UserRoleId");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("UserRoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1fc87eb4-0820-40e7-bc9d-72dae05dd397"),
                            Status = true,
                            UserRoleName = "Admin"
                        },
                        new
                        {
                            Id = new Guid("2efbff6a-599e-4738-a619-dd2f9c9f1543"),
                            Status = true,
                            UserRoleName = "User"
                        });
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.Order", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.User", "User")
                        .WithMany("UserProducts")
                        .HasForeignKey("UserId");

                    b.OwnsOne("pet_store_backend.domain.Entities.Orders.ValueObjects.DeliveryDate", "ExpectedDelivery", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpectedDeliveryEndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("ExpectedDeliveryStartDate");

                            b1.HasKey("OrderId");

                            b1.ToTable("Orders");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("ExpectedDelivery");

                    b.Navigation("User");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.OrderProduct", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.Customer", "Customer")
                        .WithMany("CustomerProducts")
                        .HasForeignKey("CustomerId");

                    b.HasOne("pet_store_backend.domain.Entities.Orders.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId");

                    b.HasOne("pet_store_backend.domain.Entities.PetProducts.PetProduct.Product", "Product")
                        .WithMany("UserProducts")
                        .HasForeignKey("ProductId");

                    b.Navigation("Customer");

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProduct.Product", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.PetProducts.PetProductCategory.Category", null)
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("pet_store_backend.domain.Entities.PetProducts.ValueObjects.Price", "ProductPrice", b1 =>
                        {
                            b1.Property<Guid>("ProductId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18, 2)");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("nvarchar(3)");

                            b1.Property<decimal>("Discount")
                                .HasColumnType("decimal(18, 2)");

                            b1.HasKey("ProductId");

                            b1.ToTable("Products");

                            b1.WithOwner()
                                .HasForeignKey("ProductId");
                        });

                    b.Navigation("ProductPrice")
                        .IsRequired();
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.Customer", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.UserRole", "CustomerRole")
                        .WithMany("Customers")
                        .HasForeignKey("CustomerRoleId");

                    b.Navigation("CustomerRole");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.User", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.UserRole", "UserRole")
                        .WithMany("Users")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.UserPermission", b =>
                {
                    b.HasOne("pet_store_backend.domain.Entities.Users.UserRole", "UserRole")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserRoleId");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Orders.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProduct.Product", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.PetProducts.PetProductCategory.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.Customer", b =>
                {
                    b.Navigation("CustomerProducts");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.User", b =>
                {
                    b.Navigation("UserProducts");
                });

            modelBuilder.Entity("pet_store_backend.domain.Entities.Users.UserRole", b =>
                {
                    b.Navigation("Customers");

                    b.Navigation("UserPermissions");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
